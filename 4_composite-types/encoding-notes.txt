You must know what encoding a string uses or you cannot interpret and display it correctly. This is commonly defined in the header of the document:
	Content-Type: text/plain; charset="UTF-8"
This tag (or a similar one) must be at the top of a webpage because as soon as the browser reads this tag, it stops and starts over at the beginning using the defined charset.

ASCII
  - Developed when most computers were 8-bit machines
  - 0-32 are control characters, like beeps
  - 32-127 are letters and numbers, stored in 7 bits
  - 128+ is defined by ANSI standard as code pages, defined differently by language and location

Unicode
  - From the need to represent chars in more languages
  - chars were represented as a hex code point (U+00693) rather than number
  - Each letter in every alphabet is assigned a code point by the Unicode consortium
    - Ex: 'Hello': U+0048 U+0065 U+006C U+006F
  - Byte Order Mark: FE FF to define endianness
  - Not PHP supported

UTF-8
  - Backwards compatible with ASCII
  - Code points from 1-127 stored in 8 bits/1 byte 
    - All English in ASCII = UTF-8
    - Ex: 'Hello' in Unicode: U+0048 U+0065 U+006C U+006F
    - Ex: 'Hello' in ACII:        48     65     6C     6F

  - About the number of bytes used to store character representations

UTF-16
  - NOT backwards compatible with ASCII
  - Uses minimum of 16 bits/2 bytes to store unicode code points

In Go:
  - Go source code is UTF-8
  - A string holds arbitrary bytes
  - A string literal that does not contain byte-level escapes holds UTF-8 sequences
  - The sequences are called runes and represent Unicode code points
